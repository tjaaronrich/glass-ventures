<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BundleTransformer.CoffeeScript</name>
    </assembly>
    <members>
        <member name="T:BundleTransformer.CoffeeScript.Configuration.CoffeeScriptSettings">
            <summary>
            Configuration settings of CoffeeScript translator
            </summary>
        </member>
        <member name="P:BundleTransformer.CoffeeScript.Configuration.CoffeeScriptSettings.Bare">
            <summary>
            Gets or sets a flag for whether to allow compilation to JS
            without the top-level function safety wrapper
            </summary>
        </member>
        <member name="P:BundleTransformer.CoffeeScript.Configuration.CoffeeScriptSettings.JsEngine">
            <summary>
            Gets a configuration settings of JS engine
            </summary>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.Configuration.ConfigurationContextExtensions">
            <summary>
            Configuration context extensions
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Configuration.ConfigurationContextExtensions._coffeeConfig">
            <summary>
            Configuration settings of CoffeeScript translator
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Configuration.ConfigurationContextExtensions.GetCoffeeScriptSettings(BundleTransformer.Core.Configuration.IConfigurationContext)">
            <summary>
            Gets a CoffeeScript translator configuration settings
            </summary>
            <param name="context">Configuration context</param>
            <returns>Configuration settings of CoffeeScript translator</returns>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.Constants.AssetTypeCode">
            <summary>
            Asset type code constants
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Constants.AssetTypeCode.CoffeeScript">
            <summary>
            CoffeeScript asset
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Constants.AssetTypeCode.LiterateCoffeeScript">
            <summary>
            Literate CoffeeScript asset
            </summary>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.Constants.TranslatorName">
            <summary>
            Translator names constants
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Constants.TranslatorName.CoffeeScriptTranslator">
            <summary>
            Name (key) of CoffeeScript translator
            </summary>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.HttpHandlers.CoffeeScriptAssetHandler">
            <summary>
            Debugging HTTP handler that responsible for text output
            of translated CoffeeScript asset
            </summary>
        </member>
        <member name="P:BundleTransformer.CoffeeScript.HttpHandlers.CoffeeScriptAssetHandler.IsStaticAsset">
            <summary>
            Gets a value indicating whether asset is static
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.HttpHandlers.CoffeeScriptAssetHandler.#ctor">
            <summary>
            Constructs a instance of the debugging CoffeeScript HTTP handler
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.HttpHandlers.CoffeeScriptAssetHandler.#ctor(System.Web.Caching.Cache,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper,BundleTransformer.Core.Configuration.AssetHandlerSettings)">
            <summary>
            Constructs a instance of the debugging CoffeeScript HTTP handler
            </summary>
            <param name="cache">Server cache</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
            <param name="assetHandlerConfig">Configuration settings of the debugging HTTP handler</param>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.HttpHandlers.CoffeeScriptAssetHandler.TranslateAsset(BundleTransformer.Core.Assets.IAsset,BundleTransformer.Core.Transformers.ITransformer,System.Boolean)">
            <summary>
            Translates a code of asset written on CoffeeScript to JS code
            </summary>
            <param name="asset">Asset</param>
            <param name="transformer">Transformer</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Translated asset</returns>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompilationException">
            <summary>
            The exception that is thrown when a compiling of asset code by CoffeeScript compiler is failed
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompilationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompilationException"/> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompilationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompilationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler">
            <summary>
            CoffeeScript compiler
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.RESOURCES_NAMESPACE">
            <summary>
            Namespace for resources
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.COFFEESCRIPT_LIBRARY_FILE_NAME">
            <summary>
            Name of file, which contains a CoffeeScript library
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.CSC_HELPER_FILE_NAME">
            <summary>
            Name of file, which contains a CoffeeScript compiler helper
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.COMPILATION_FUNCTION_CALL_TEMPLATE">
            <summary>
            Template of function call, which is responsible for compilation
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler._jsEngine">
            <summary>
            JS engine
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler._options">
            <summary>
            Compilation options
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler._literalFileExtensionRegex">
            <summary>
            Regular expression for working with literal file extensions
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler._initializedFlag">
            <summary>
            Flag that compiler is initialized
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler._disposedFlag">
            <summary>
            Flag that object is destroyed
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.#ctor(System.Func{JavaScriptEngineSwitcher.Core.IJsEngine},BundleTransformer.CoffeeScript.Internal.CompilationOptions)">
            <summary>
            Constructs a instance of CoffeeScript compiler
            </summary>
            <param name="createJsEngineInstance">Delegate that creates an instance of JS engine</param>
            <param name="options">Compilation options</param>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.Initialize">
            <summary>
            Initializes compiler
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.Compile(System.String,System.String)">
            <summary>
            "Compiles" CoffeeScript code to JS code
            </summary>
            <param name="content">Text content written on CoffeeScript</param>
            <param name="path">Path to CoffeeScript file</param>
            <returns>Translated CoffeeScript code</returns>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.IsLiterate(System.String)">
            <summary>
            Determines whether the file is "literate"
            </summary>
            <param name="path">Path to CoffeeScript file</param>
            <returns>true if the file is "literate"; otherwise, false</returns>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.ConvertCompilationOptionsToJson(System.String,BundleTransformer.CoffeeScript.Internal.CompilationOptions)">
            <summary>
            Converts a compilation options to JSON
            </summary>
            <param name="path">Path to CoffeeScript file</param>
            <param name="options">Compilation options</param>
            <returns>Compilation options in JSON format</returns>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.FormatErrorDetails(Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>
            Generates a detailed error message
            </summary>
            <param name="errorDetails">Error details</param>
            <param name="sourceCode">Source code</param>
            <param name="currentFilePath">Path to current CoffeeScript file</param>
            <returns>Detailed error message</returns>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CoffeeScriptCompiler.Dispose">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.Internal.CompilationOptions">
            <summary>
            CoffeeScript compilation options
            </summary>
        </member>
        <member name="P:BundleTransformer.CoffeeScript.Internal.CompilationOptions.Bare">
            <summary>
            Gets or sets a flag for whether to allow compilation to JS
            without the top-level function safety wrapper
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Internal.CompilationOptions.#ctor">
            <summary>
            Constructs a instance of the CoffeeScript compilation options
            </summary>
        </member>
        <member name="T:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator">
            <summary>
            Translator that responsible for translation of CoffeeScript code to JS code
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.INPUT_CODE_TYPE">
            <summary>
            Name of input code type
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.OUTPUT_CODE_TYPE">
            <summary>
            Name of output code type
            </summary>
        </member>
        <member name="F:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator._createJsEngineInstance">
            <summary>
            Delegate that creates an instance of JS engine
            </summary>
        </member>
        <member name="P:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.IsDebugMode">
            <summary>
            Gets or sets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="P:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.Bare">
            <summary>
            Gets or sets a flag for whether to allow compilation to JS
            without the top-level function safety wrapper
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.#ctor">
            <summary>
            Constructs a instance of CoffeeScript translator
            </summary>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.#ctor(System.Func{JavaScriptEngineSwitcher.Core.IJsEngine},BundleTransformer.CoffeeScript.Configuration.CoffeeScriptSettings)">
            <summary>
            Constructs a instance of CoffeeScript translator
            </summary>
            <param name="createJsEngineInstance">Delegate that creates an instance of JS engine</param>
            <param name="coffeeConfig">Configuration settings of CoffeeScript translator</param>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.Translate(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Translates a code of asset written on CoffeeScript to JS code
            </summary>
            <param name="asset">Asset with code written on CoffeeScript</param>
            <returns>Asset with translated code</returns>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.Translate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Translates a code of assets written on CoffeeScript to JS code
            </summary>
            <param name="assets">Set of assets with code written on CoffeeScript</param>
            <returns>Set of assets with translated code</returns>
        </member>
        <member name="M:BundleTransformer.CoffeeScript.Translators.CoffeeScriptTranslator.CreateCompilationOptions">
            <summary>
            Creates a compilation options
            </summary>
            <returns>Compilation options</returns>
        </member>
    </members>
</doc>
